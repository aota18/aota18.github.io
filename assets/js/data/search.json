[ { "title": "My first chrome extension", "url": "/posts/my-first-chrome-extension/", "categories": "Project, Web, Chrome, Extension, i18n", "tags": "Project, Web, Chrome, Extension, i18n", "date": "2022-05-25 19:26:00 +0900", "snippet": "IntroIn this post, I want to introduce my small project. It is Bible Search chrome web extension.The idea started from my question when I was in church. I was youth leader on my church and I had to create and upload small bulletin on messenger. Everytime when I had to search the bible, I had to visit the bible website and click and drag to find the verses. Like every developers try to improve iterative process more efficiently, I thought chrome extension was really good tool to achieve this goal.Bible Search ExtensionLittle drops make the might oceanI love this quotes because It explains basic principle of our life. Same as on my project, I just focused on the basic search features and the simplicity. These are the features this extension provides: Search bible with simple abbreviated keywords Copy on clipboard Multi languages support (Korean, English)Development ProcessBasically, I can structurize and explain each parts of this development. Hosting &amp;amp; Database Backend FrontendHosting &amp;amp; DatabaseI used AWS EC2(t2.micro) as a backend server and installed MySQL inside of server. Also, there are open bible data you can access with sql. So I downloaded from them and manually imported on my ec2 server. Korean version link (개역개정) English version link (multi version supported)BackendUsed Node.JS as backend framework which is lightweight and easy to set up. I just created Restful APIs for fetching parsed data from database.FrontendIn the case of chrome extension, you don’t need to deploy the front-end code on your server. All you need to do is just upload your source code including manifest.json which is essential config file for extension. This is a simple structure of client source code:..||-- index.html|--....|-- manifest.json|-- script.js|-- ....What I’ve learnedIt was just a first step to become a great developer. I just learned the whole process from ideation to deployment on market where user can downloads. It was much harder than its size but it is valuable. These are the new things I could experienced: Create chrome extension and deployment process how to use i18n (internationalization) on project.Further featuresSo many features are waiting for this project to be a good product for user:Development Applying Unit test (TDD) : it is not easy to test manually as features are added and the product is getting bigger. Implementig unit test on this project is higher priority.Features Verse search with keywords : this is an idea from my pastor. Most of websites provides this feature and will be updated on next version. More versions of bible : For now, only one bible version for each language is supported but will include more versions on next update." }, { "title": "What is Shebang Line?", "url": "/posts/what-is-shebang-line/", "categories": "Unix", "tags": "Unix", "date": "2021-06-05 12:11:00 +0900", "snippet": "#!/bin/bash#!/user/bin/env python3What is Shebang line?Shebang line is a common pattern for Unix based systems.It allows a script to be invoked from the command line.There are two parts to the shebang line. The hash mark and the exclamation sign : must be the first two characters on the first line of the file. the exclamation sign is sometimes called as bang. so hash plus bang is where the word shebang comes from. These two letters must be the first two bytes of the file. Path of executable file : After the shebang, it is the path to the executable that will run your script along with any other optional arguments.It is using the Unix env command to find the path to the Python interpreter. Of course, this shebang line doesn’t cover all of different installation environments." }, { "title": "How to install an SSL Certificate", "url": "/posts/how-to-install-a-SSL-Certificate/", "categories": "Web, SSL", "tags": "Web, SSL", "date": "2021-05-28 12:11:00 +0900", "snippet": "Index What is a SSL? SSL Issuing Install SSLWhat is a SSL?HTTP and HTTPSIn the past, most sites used to start with http://~, but now they are all addressed with URLs starting with https://~. This means that the computer or mobile phone we connect to is in encrypted communication with the server on that site. HTTPS is followed by an s, which means ‘Secure’.SSL (Secure Socket Layer)HTTPS was born by strengthening the security of HTTP in the communication protocol. [Source : https://blog.naver.com/skinfosec2000/222135874222]SSL creates an independent protocol layer called the ‘security layer’ and falls between the application layer (HTTP, FTP…) and the transport layer (TCP, etc.) as shown. In other words, HTTPS is a protocol for secure HTTP communication by placing an HTTP protocol on top of SSL. It’s like being shipped to a paper delivery box and then turned into a locked iron box.SSL IssuingThere are several subjects of SSL issuance, but there is a site that can be received free of charge, so I received it from the site below.Site : https://letsencrypt.org/ko/docs/Issuing Wildcard CertificateA wildcard certificate is a certificate that supports multiple subdomains on a per-host basis in a Domain. To issue this certificate, additional information must be added to the ‘DNS record’ either through the domain server or through the hosting organization’s domain management tools.Install SSLAfter SSL issuance, the ‘SSL Certificate’ and ‘Private Key’ files are saved. You can configure the nginx server settings with these two files.Below is the contents of default.conf of nginx.server { listen 443 ssl http2 default_server; server_name abc.com; ### Cert file ### ssl_certificate /usr/share/nginx/ssl/abc.com.pem; ### Private Key 파일 ### ssl_certificate_key /usr/share/nginx/ssl/abc.com.priv.pem; ### SSL Activation ### ssl_prefer_server_ciphers on; ssl_protocols TLSv1.1 TLSv1.2; ### redirects to m.abc.com으로 on Mobile ### set $mobile_rewrite do_not_perform; if ($http_user_agent ~* &quot;(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge\\ |maemo|midp|mmp|mobile.+firefox|netfront|opera\\ m(ob|in)i|palm(\\ os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows\\ ce|xda|xiino [NC,OR]&quot;) { set $mobile_rewrite perform; } if ($http_user_agent ~* &quot;^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a\\ wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r\\ |s\\ )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1\\ u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp(\\ i|ip)|hs\\-c|ht(c(\\-|\\ |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac(\\ |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt(\\ |\\/)|klon|kpt\\ |kwc\\-|kyo(c|k)|le(no|xi)|lg(\\ g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-|\\ |o|v)|zz)|mt(50|p1|v\\ )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v\\ )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-|\\ )|webc|whit|wi(g\\ |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-) [NC]&quot;) { set $mobile_rewrite perform; } if ($mobile_rewrite = perform) { rewrite ^ https://m.abc.com$request_uri? redirect; break; } ### location of page source ### root /usr/share/nginx/html; index index.html index.htm;}When you have finished setting up HTTPS (port 443), you need to set up Redirect to turn the existing HTTP user back to HTTPS. The contents are as follows.server { listen 80; server_name abc.com; ### Redirects to HTTPS ### return 301 https://$server_name$request_uri;}If you write down the Nginx setting and restart it, you can see that it runs properly." }, { "title": "Build servce page deploy pipeline", "url": "/posts/build-service-page-deploy-pipeline/", "categories": "Web, Deployment, CI/CD, Docker", "tags": "Web, Deployment, CI/CD, Docker", "date": "2021-04-24 12:11:00 +0900", "snippet": "IntroI wrote the process while constructing the development pipeline of the ongoing EcoX service page. First of all, the sources developed and handed over are composed of HTML, CSS, and JS, and there were about 140MB of images and video files inside. Before configuring the development environment, we decided to build it using the tools that are the simplest and most essential for maintenance, depending on how the service page will be maintained and utilized in the future.Large Image and Video filesI tried to manage all code in git repository for deployment and source management, but the given sources included large amounts of images (.png, .jpg) and image files (.mp4) and I couldn’t include them in scm like git. That’s why these media files had to be placed separately in storage outside or inside the server, and only the remaining code had to be managed by scm.In order to solve the above problems, I had to think about the following problems. How to build a CI/CD environment? Where will the media files (images, images) be located? Position externally (S3 Storage) Place it inside (directly stored in the server)How to build a CI/CD environment?There was a sample project that we built a distribution pipeline using Docker and Jenkins that we are currently studying, and we decided to use it because we didn’t have much time. Basically, the result of building in a library such as React, a front-end library, was the same as the file structure, so we decided to use Dockerfile for containerization, and we could easily build a CI/CD environment because Jenkins’ pipeline was the same except for the build process.Basically, there are Local, Dev, and Prod enviornments and I put the pipeline which deploys to the server putting dev branch and masterbranch in Github.Where will the media files (images, images) be located?In order to build a distribution pipeline such as above, media files needed to be managed separately from normal code. Because of the large capacity, if you make it into a docker image together, the image is very large and the body is heavy in distribution, so you had to avoid it. So I thought of it in two main ways, one of them being S3 storage, which is used in general projects, or putting files directly on an internal server.S3 StorageThe use of S3storage also has a huge advantage in maintenance for later media files, but I thought that the fact that they are not currently located in S3 and that there is no DB that stores code or url for S3 is not enough time to build. In addition, when I put media files in S3, I thought that there was not enough time at the moment because the path to load the files in the code also had to be modified.Save in ServerThe way to save it in the server is to send media files directly to the server through ftp and so on, and the codes directly load the files in the server. However, all the codes were containerized and a separate method was needed to access the files directly within the EC2 server. As a result of googling to solve this problem, we found that using Docker’s Volume can be easily solved.What is Docker Volume ?Docker Volume is a technology that creates a separate space to position data that can be shared by a container and allow one or more containers to share that space.With reference to this, we placed each of the necessary image files in the corresponding Docker Volume and placed the volume in the path of the existing image file in the serving container.And I proceeded with the contents in the following order. Create Docker Volume Media file located in that volume Run by mounting the volume to the service container 1. Create docekr volume# Image for Desktop$ docker volume create img-d# Image for Mobile$ docker volume create img-m2. Locate media file to target Route of img-d volume` /var/lib/docker/volumes/img-d/_data` Route of img-m volume Path/var/lib/docker/volumes/img-m/_data 3. Run by Volume Mounting the Service Container Images for mobile :Mount Path : /usr/share/nginx/html/m/img Images for desktop :Mount Path : /usr/share/nginx/html/img And when you run the container, mount the two volumes to the desired location and run.ConclusionThrough Jenkins distribution, it was confirmed that the image was loaded well without code modification and there was no problem." } ]
